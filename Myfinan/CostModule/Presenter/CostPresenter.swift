//
//  CostPresenter.swift
//  Myfinan
//
//  Created tambanco ü•≥ on 29.03.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol CostViewProtocol: AnyObject {
    func setCost(cost: [Cost])
    func setTitle(title: String?)
    func configureAddButton(addNewCost: UIBarButtonItem)
    func presentCostVC(viewControllerToPresent: UIViewController)
}

// MARK: Input protocol
protocol CostPresenterProtocol: AnyObject {
    init(view: CostViewProtocol, model:  [Cost], title: String?, context: NSManagedObjectContext)
    func showCost()
    func showTitle()
    func showAddButton()
    func updateModel(indexPath: IndexPath)
}

class CostPresenter: CostPresenterProtocol {
    
    
    weak var view: CostViewProtocol?
    var model: [Cost] = [Cost]()
    var title: String?
    var context: NSManagedObjectContext!
    
    func showTitle() {
        self.view?.setTitle(title: title)
    }
    
    func showAddButton() {
        let addNewCost = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addCost))
        self.view?.configureAddButton(addNewCost: addNewCost)
    }
    
    @objc func addCost() {
        let alert = UIAlertController(title: "", message: "", preferredStyle: .alert)
        alert.addTextField { alertTextField in
            alertTextField.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
            //–¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é
        }
        
        alert.addTextField { alertTextField in
            alertTextField.placeholder = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            alertTextField.autocapitalizationType = .sentences
        }

        let addAction = UIAlertAction(title: "–î–æ–±–∞–≤–∏—Ç—å", style: .default) { action in
            let newCost = Cost(context: self.context)
            let today = Date()
            let hours   = (Calendar.current.component(.hour, from: today))
            let minutes = (Calendar.current.component(.minute, from: today))
            newCost.timeMark = "\(hours):\(minutes)"
            newCost.label = "–û–ø–ª–∞—Ç–∞ \(alert.textFields?[0].text ?? "999") —Ä—É–±–ª–µ–π –∑–∞ \(self.title ?? "111")"
            newCost.comment = alert.textFields?[1].text ?? "99"
            self.model.append(newCost)
            self.view?.setCost(cost: self.model)
            CoreDataManager.sharedManager.saveContext()
        }

        let cancelAction = UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil)
        alert.addAction(cancelAction)
        alert.addAction(addAction)
        alert.view.subviews.first?.subviews.first?.subviews.first?.backgroundColor = .systemTeal
        alert.view.tintColor = .black
        self.view?.presentCostVC(viewControllerToPresent: alert)
    }
    
    func updateModel(indexPath: IndexPath) {
        context.delete(model[indexPath.row])
        do {
            try context.save()
        } catch {
            print("Error saving context \(error.localizedDescription)")
        }
        model.remove(at: indexPath.row)
        self.view?.setCost(cost: model)
    }
    
    func showCost() {
        let request: NSFetchRequest<Cost> = Cost.fetchRequest()
        request.predicate = NSPredicate(format: "parentCategory.title MATCHES %@", "\(title)")
            do {
                model = try context.fetch(request)
            } catch {
                print("Error fetching request \(error.localizedDescription)")
            }
        self.view?.setCost(cost: model)
    }
    
//    func showCost (with request: NSFetchRequest<Cost> , predicate: NSPredicate?) {
//        let categoryPredicate = NSPredicate(format: "parentCategory.title MATCHES %@", selectedCategory!.title!)
//        if let additionalPredicate = predicate {
//            request.predicate = NSCompoundPredicate(andPredicateWithSubpredicates: [categoryPredicate, additionalPredicate])
//        } else {
//            request.predicate = categoryPredicate
//        }
//
//        do {
//            model = try context.fetch(request)
//        } catch {
//            print("Error fetching data from context: \(error)")
//        }
//        self.view?.setCost(cost: model)
//    }

    required init(view: CostViewProtocol, model: [Cost], title: String?, context: NSManagedObjectContext) {
        self.view = view
        self.model = model
        self.title = title
        self.context = context
    }
}
