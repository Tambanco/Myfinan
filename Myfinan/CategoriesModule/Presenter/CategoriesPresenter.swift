//
//  CategoriesPresenter.swift
//  Myfinan
//
//  Created tambanco ü•≥ on 21.03.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol CategoriesViewProtocol: AnyObject {
    func setCategories(categories: [Categories])
    func configureNavigationBar(largeTitleColor: UIColor, backgoundColor: UIColor, tintColor: UIColor, title: String, preferredLargeTitle: Bool)
    func configureAddButton(addButton: UIBarButtonItem)
    func present(viewControllerToPresent: UIViewController)
}

// MARK: Input protocol
protocol CategoriesPresenterProtocol: AnyObject {
    init(view: CategoriesViewProtocol, model:  Categories)
    func showCategories()
    func showNavigationBar()
    func showAddButton()
    func updateModel(indexPath: IndexPath)
}

class CategoriesPresenter: CategoriesPresenterProtocol {
    
    weak var view: CategoriesViewProtocol?
    var model: Categories
    let context = CoreDataManager.sharedManager.persistentContainer.viewContext
    var categories = [Categories]()
    
    func showAddButton() {
        let addItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addCategory))
        self.view?.configureAddButton(addButton: addItem)
    }
    
    @objc func addCategory() {
        var categoryTextField = UITextField()
        let alert = UIAlertController(title: "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", message: "", preferredStyle: .alert)
        alert.addTextField { alertTextField in
            alertTextField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            categoryTextField = alertTextField
        }
        let action = UIAlertAction(title: "–î–æ–±–∞–≤–∏—Ç—å", style: .default) { action in
            let newCategory = Categories(context: self.context)
            newCategory.category = categoryTextField.text ?? "999"
            self.categories.append(newCategory)
            self.view?.setCategories(categories: self.categories)
            CoreDataManager.sharedManager.saveContext()
        }
        alert.addAction(UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil))
        alert.addAction(action)
        self.view?.present(viewControllerToPresent: alert)
    }
    
    func updateModel(indexPath: IndexPath) {
        self.context.delete(categories[indexPath.row])
        do {
            try self.context.save()
        } catch {
            print("Error saving context \(error.localizedDescription)")
        }
        categories.remove(at: indexPath.row)
        self.view?.setCategories(categories: categories)
    }
    
    func showCategories() {
        let context = CoreDataManager.sharedManager.persistentContainer.viewContext
        let request: NSFetchRequest<Categories> = Categories.fetchRequest()
            do {
                categories = try context.fetch(request)
            } catch {
                print("Error fetching request \(error.localizedDescription)")
            }
        self.view?.setCategories(categories: categories)
    }
    
    func showNavigationBar() {
        self.view?.configureNavigationBar(largeTitleColor: .black, backgoundColor: .systemCyan, tintColor: .black, title: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", preferredLargeTitle: true)
    }
    
    required init(view: CategoriesViewProtocol, model: Categories) {
        self.view = view
        self.model = model
    }
}
