//
//  CategoriesPresenter.swift
//  Myfinan
//
//  Created tambanco ü•≥ on 21.03.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol CategoriesViewProtocol: AnyObject {
    func setCategories(categories: [Category])
    func configureAddButton(addButton: UIBarButtonItem)
    func present(viewControllerToPresent: UIViewController)
}

// MARK: Input protocol
protocol CategoriesPresenterProtocol: AnyObject {
    init(view: CategoriesViewProtocol, model:  [Category])
    func showCategories()
    func showAddButton()
    func updateModel(indexPath: IndexPath)
}

class CategoriesPresenter: CategoriesPresenterProtocol {
    
    var model: [Category] = []
    weak var view: CategoriesViewProtocol?
    
    
    func showAddButton() {
        let addItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addCategory))
        self.view?.configureAddButton(addButton: addItem)
    }
    
    @objc func addCategory() {
        let alert = UIAlertController(title: "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", message: "", preferredStyle: .alert)
        alert.addTextField { alertTextField in
            alertTextField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            alertTextField.autocapitalizationType = .sentences
        }

        let addAction = UIAlertAction(title: "–î–æ–±–∞–≤–∏—Ç—å", style: .default) { action in
            let context = CoreDataManager.sharedManager.persistentContainer.viewContext
            let newCategory = Category(context: context)
            newCategory.title = alert.textFields?.first?.text ?? "999"
            self.model.append(newCategory)
            self.view?.setCategories(categories: self.model)
            CoreDataManager.sharedManager.saveContext()
        }

        let cancelAction = UIAlertAction(title: "–û—Ç–º–µ–Ω–∞", style: .cancel, handler: nil)

        alert.addAction(cancelAction)
        alert.addAction(addAction)
        alert.view.subviews.first?.subviews.first?.subviews.first?.backgroundColor = .systemTeal
        alert.view.tintColor = .black
        self.view?.present(viewControllerToPresent: alert)
    }
    
    func updateModel(indexPath: IndexPath) {
        let context = CoreDataManager.sharedManager.persistentContainer.viewContext
        context.delete(model[indexPath.row])
        do {
            try context.save()
        } catch {
            print("Error saving context \(error.localizedDescription)")
        }
        model.remove(at: indexPath.row)
        self.view?.setCategories(categories: model)
    }
    
    func showCategories() {
        let context = CoreDataManager.sharedManager.persistentContainer.viewContext
        let request: NSFetchRequest<Category> = Category.fetchRequest()
            do {
                model = try context.fetch(request)
            } catch {
                print("Error fetching request \(error.localizedDescription)")
            }
        self.view?.setCategories(categories: model)
    }
    
    required init(view: CategoriesViewProtocol, model: [Category]) {
        self.view = view
        self.model = model
    }
}
