//
//  CategoriesPresenter.swift
//  Myfinan
//
//  Created tambanco ü•≥ on 21.03.2022.
//
//  Template generated by Tambanco
//

import Foundation
import UIKit
import CoreData

// MARK: Output protocol
protocol CategoriesViewProtocol: AnyObject {
    func setCategories(categories: [Category], categoryName: String?)
    func configureAddButton(addButton: UIBarButtonItem)
    func present(viewControllerToPresent: UIViewController)
}

// MARK: Input protocol
protocol CategoriesPresenterProtocol: AnyObject {
    init(view: CategoriesViewProtocol, categories:  [Category])
    func showCategories()
    func showAddButton()
    func editModel(indexPath: IndexPath)
    func removeModelItems(indexPath: IndexPath)
}

class CategoriesPresenter: CategoriesPresenterProtocol {
    
    var categories: [Category] = [Category]()
    weak var view: CategoriesViewProtocol?
    let context = CoreDataManager.sharedManager.persistentContainer.viewContext
    
    
    func showAddButton() {
        let addItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addCategory))
        self.view?.configureAddButton(addButton: addItem)
    }
    
    @objc func addCategory() {
        Alert.addNewCategory(title: "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", massage: "", actionTitle: "–î–æ–±–∞–≤–∏—Ç—å", cancelTitle: "–û—Ç–º–µ–Ω–∞", context: context, categories: categories, view: view)
    }
    
    func editModel(indexPath: IndexPath) {
        Alert.editModel(title: "", massage: "", actionTitle: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", cancelTitle: "–û—Ç–º–µ–Ω–∞", indexPath: indexPath, context: context, categories: categories, view: view)
    }
    
    func removeModelItems(indexPath: IndexPath) {
        context.delete(categories[indexPath.row])
        do {
            try context.save()
        } catch {
            print("Error saving context \(error.localizedDescription)")
        }
        categories.remove(at: indexPath.row)
        self.view?.setCategories(categories: categories, categoryName: "")
    }
    
    func showCategories() {
        let request: NSFetchRequest<Category> = Category.fetchRequest()
            do {
                categories = try context.fetch(request)
            } catch {
                print("Error fetching request \(error.localizedDescription)")
            }
        self.view?.setCategories(categories: categories, categoryName: "")
    }
    
    required init(view: CategoriesViewProtocol, categories: [Category]) {
        self.view = view
        self.categories = categories
    }
}
